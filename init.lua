vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
if not vim.loop.fs_stat(lazypath) then
	vim.fn.system {
		'git',
		'clone',
		'--filter=blob:none',
		'https://github.com/folke/lazy.nvim.git',
		'--branch=stable', -- latest stable release
		lazypath,
	}
end
vim.opt.rtp:prepend(lazypath)
require("core.options")
require("core.autocmds")
require('lazy').setup("plugins", {})
--
--
-- -- Keymaps for better default experience
-- -- See `:help vim.keymap.set()`
-- vim.keymap.set({ 'n', 'v' }, '<Space>', '<Nop>', { silent = true })
--
-- -- Remap for dealing with word wrap
-- vim.keymap.set('n', 'k', "v:count == 0 ? 'gk' : 'k'", { expr = true, silent = true })
-- vim.keymap.set('n', 'j', "v:count == 0 ? 'gj' : 'j'", { expr = true, silent = true })
--
--
-- -- [[ Configure Telescope ]]
-- -- See `:help telescope` and `:help telescope.setup()`
-- require('telescope').setup {
-- 	defaults = {
-- 		mappings = {
-- 			i = {
-- 				['<C-u>'] = false,
-- 				['<C-d>'] = false,
-- 			},
-- 		},
-- 	},
-- }
--
-- -- Enable telescope fzf native, if installed
-- pcall(require('telescope').load_extension, 'fzf')
--
-- -- See `:help telescope.builtin`
-- vim.keymap.set('n', '<leader>?', require('telescope.builtin').oldfiles, { desc = '[?] Find recently opened files' })
-- vim.keymap.set('n', '<leader><space>', require('telescope.builtin').buffers, { desc = '[ ] Find existing buffers' })
-- vim.keymap.set('n', '<leader>/', function()
-- 	-- You can pass additional configuration to telescope to change theme, layout, etc.
-- 	require('telescope.builtin').current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
-- 		winblend = 10,
-- 		previewer = false,
-- 	})
-- end, { desc = '[/] Fuzzily search in current buffer' })
--
-- vim.keymap.set('n', '<leader>gf', require('telescope.builtin').git_files, { desc = 'Search [G]it [F]iles' })
-- vim.keymap.set('n', '<leader>ff', require('telescope.builtin').find_files, { desc = '[S]earch [F]iles' })
-- vim.keymap.set('n', '<leader>fh', require('telescope.builtin').help_tags, { desc = '[S]earch [H]elp' })
-- vim.keymap.set('n', '<leader>fs', require('telescope.builtin').grep_string, { desc = '[S]earch current [W]ord' })
-- vim.keymap.set('n', '<leader>fl', require('telescope.builtin').live_grep, { desc = '[S]earch by [G]rep' })
-- vim.keymap.set('n', '<leader>fd', require('telescope.builtin').diagnostics, { desc = '[S]earch [D]iagnostics' })
--
-- -- [[ Configure Treesitter ]]
-- -- See `:help nvim-treesitter`
-- require('nvim-treesitter.configs').setup {
-- 	-- Add languages to be installed here that you want installed for treesitter
-- 	ensure_installed = { 'c', 'cpp', 'go', 'lua', 'python', 'rust', 'tsx', 'typescript', 'vimdoc', 'vim' },
--
-- 	-- Autoinstall languages that are not installed. Defaults to false (but you can change for yourself!)
-- 	auto_install = true,
--
-- 	highlight = { enable = true },
-- 	indent = { enable = true },
-- 	incremental_selection = {
-- 		enable = true,
-- 		keymaps = {
-- 			init_selection = '<c-space>',
-- 			node_incremental = '<c-space>',
-- 			scope_incremental = '<c-s>',
-- 			node_decremental = '<M-space>',
-- 		},
-- 	},
-- 	textobjects = {
-- 		select = {
-- 			enable = true,
-- 			lookahead = true, -- Automatically jump forward to textobj, similar to targets.vim
-- 			keymaps = {
-- 				-- You can use the capture groups defined in textobjects.scm
-- 				['aa'] = '@parameter.outer',
-- 				['ia'] = '@parameter.inner',
-- 				['af'] = '@function.outer',
-- 				['if'] = '@function.inner',
-- 				['ac'] = '@class.outer',
-- 				['ic'] = '@class.inner',
-- 			},
-- 		},
-- 		move = {
-- 			enable = true,
-- 			set_jumps = true, -- whether to set jumps in the jumplist
-- 			goto_next_start = {
-- 				[']m'] = '@function.outer',
-- 				[']]'] = '@class.outer',
-- 			},
-- 			goto_next_end = {
-- 				[']M'] = '@function.outer',
-- 				[']['] = '@class.outer',
-- 			},
-- 			goto_previous_start = {
-- 				['[m'] = '@function.outer',
-- 				['[['] = '@class.outer',
-- 			},
-- 			goto_previous_end = {
-- 				['[M'] = '@function.outer',
-- 				['[]'] = '@class.outer',
-- 			},
-- 		},
-- 		swap = {
-- 			enable = true,
-- 			swap_next = {
-- 				['<leader>a'] = '@parameter.inner',
-- 			},
-- 			swap_previous = {
-- 				['<leader>A'] = '@parameter.inner',
-- 			},
-- 		},
-- 	},
-- }
--
-- -- Diagnostic keymaps
-- vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, { desc = 'Go to previous diagnostic message' })
-- vim.keymap.set('n', ']d', vim.diagnostic.goto_next, { desc = 'Go to next diagnostic message' })
-- vim.keymap.set('n', '<leader>e', vim.diagnostic.open_float, { desc = 'Open floating diagnostic message' })
-- vim.keymap.set('n', '<leader>q', vim.diagnostic.setloclist, { desc = 'Open diagnostics list' })
--
-- -- [[ Configure LSP ]]
-- --  This function gets run when an LSP connects to a particular buffer.
-- local on_attach = function(_, bufnr)
-- 	-- NOTE: Remember that lua is a real programming language, and as such it is possible
-- 	-- to define small helper and utility functions so you don't have to repeat yourself
-- 	-- many times.
-- 	--
-- 	-- In this case, we create a function that lets us more easily define mappings specific
-- 	-- for LSP related items. It sets the mode, buffer and description for us each time.
-- 	local nmap = function(keys, func, desc)
-- 		if desc then
-- 			desc = 'LSP: ' .. desc
-- 		end
--
-- 		vim.keymap.set('n', keys, func, { buffer = bufnr, desc = desc })
-- 	end
--
-- 	nmap('<leader>rn', vim.lsp.buf.rename, '[R]e[n]ame')
-- 	nmap('<leader>ca', vim.lsp.buf.code_action, '[C]ode [A]ction')
--
-- 	nmap('gd', vim.lsp.buf.definition, '[G]oto [D]efinition')
-- 	nmap('gr', require('telescope.builtin').lsp_references, '[G]oto [R]eferences')
-- 	nmap('gI', vim.lsp.buf.implementation, '[G]oto [I]mplementation')
-- 	nmap('<leader>D', vim.lsp.buf.type_definition, 'Type [D]efinition')
-- 	nmap('<leader>ds', require('telescope.builtin').lsp_document_symbols, '[D]ocument [S]ymbols')
-- 	nmap('<leader>ws', require('telescope.builtin').lsp_dynamic_workspace_symbols, '[W]orkspace [S]ymbols')
--
-- 	-- See `:help K` for why this keymap
-- 	nmap('K', vim.lsp.buf.hover, 'Hover Documentation')
-- 	nmap('<C-k>', vim.lsp.buf.signature_help, 'Signature Documentation')
--
-- 	-- Lesser used LSP functionality
-- 	nmap('gD', vim.lsp.buf.declaration, '[G]oto [D]eclaration')
-- 	nmap('<leader>wa', vim.lsp.buf.add_workspace_folder, '[W]orkspace [A]dd Folder')
-- 	nmap('<leader>wr', vim.lsp.buf.remove_workspace_folder, '[W]orkspace [R]emove Folder')
-- 	nmap('<leader>wl', function()
-- 		print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
-- 	end, '[W]orkspace [L]ist Folders')
--
-- 	-- Create a command `:Format` local to the LSP buffer
-- 	vim.api.nvim_buf_create_user_command(bufnr, 'Format', function(_)
-- 		vim.lsp.buf.format()
-- 	end, { desc = 'Format current buffer with LSP' })
-- end
--
-- -- Enable the following language servers
-- --  Feel free to add/remove any LSPs that you want here. They will automatically be installed.
-- --
-- --  Add any additional override configuration in the following tables. They will be passed to
-- --  the `settings` field of the server config. You must look up that documentation yourself.
-- --
-- --  If you want to override the default filetypes that your language server will attach to you can
-- --  define the property 'filetypes' to the map in question.
-- local servers = {
-- 	-- clangd = {},
-- 	-- gopls = {},
-- 	-- pyright = {},
-- 	-- rust_analyzer = {},
-- 	-- tsserver = {},
-- 	-- html = { filetypes = { 'html', 'twig', 'hbs'} },
--
-- 	lua_ls = {
-- 		Lua = {
-- 			workspace = { checkThirdParty = false },
-- 			telemetry = { enable = false },
-- 		},
-- 	},
-- }
--
-- -- Setup neovim lua configuration
-- require('neodev').setup()
--
-- -- nvim-cmp supports additional completion capabilities, so broadcast that to servers
-- local capabilities = vim.lsp.protocol.make_client_capabilities()
-- capabilities = require('cmp_nvim_lsp').default_capabilities(capabilities)
--
-- -- Ensure the servers above are installed
-- local mason_lspconfig = require 'mason-lspconfig'
--
-- mason_lspconfig.setup {
-- 	ensure_installed = vim.tbl_keys(servers),
-- }
--
-- mason_lspconfig.setup_handlers {
-- 	function(server_name)
-- 		require('lspconfig')[server_name].setup {
-- 			capabilities = capabilities,
-- 			on_attach = on_attach,
-- 			settings = servers[server_name],
-- 			filetypes = (servers[server_name] or {}).filetypes,
-- 		}
-- 	end
-- }
